{
	"id": 0,
	"name": "@telnyx/webrtc",
	"kind": 0,
	"flags": {},
	"originalName": "",
	"children": [
		{
			"id": 73,
			"name": "Call",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {},
			"children": [
				{
					"id": 80,
					"name": "direction",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true,
						"isExported": true
					},
					"comment": {
						"shortText": "The direction of the call.\nCan be either `inbound` or `outbound`.",
						"text": "Usage with {@link Direction}:\n"
					},
					"type": {
						"type": "reference",
						"name": "Direction"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "BaseCall.direction"
					}
				},
				{
					"id": 77,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true,
						"isExported": true
					},
					"comment": {
						"shortText": "The call identifier."
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"\"",
					"inheritedFrom": {
						"type": "reference",
						"name": "BaseCall.id"
					}
				},
				{
					"id": 79,
					"name": "prevState",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true,
						"isExported": true
					},
					"comment": {
						"shortText": "The `prevState` of the call.\nUsage with {@link State}:"
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"\"",
					"inheritedFrom": {
						"type": "reference",
						"name": "BaseCall.prevState"
					}
				},
				{
					"id": 78,
					"name": "state",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true,
						"isExported": true
					},
					"comment": {
						"shortText": "The `state` of the call.\nUsage with {@link State}:",
						"text": "| Value | Description |\n| `new` | New call has been created in the client. |\n| `trying` | It's attempting to call someone. |\n| `requesting` | The outbound call is being sent to the server. |\n| `recovering` | The previous call is recovering after the page refreshes. If the user refreshes the page during a call, it will automatically join the latest call. |\n| `ringing` | Someone is attempting to call you. |\n| `answering` | You are attempting to answer this inbound call. |\n| `early` | It receives the media before the call has been answered. |\n| `active` | Call has become active. |\n| `held` | Call has been held. |\n| `hangup` | Call has ended. |\n| `destroy` | Call has been destroyed. |\n| `purge` | Call has been purged. |\n\n"
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "State[State.New]",
					"inheritedFrom": {
						"type": "reference",
						"name": "BaseCall.state"
					}
				},
				{
					"id": 81,
					"name": "localStream",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Gets the local stream of the call.\nThis can be used in a video/audio element to play the local media.\n[MediaStream](https://developer.mozilla.org/en-US/docs/Web/API/MediaStream).",
						"tags": [
							{
								"tag": "examples",
								"text": "\n\n```js\nconst stream = call.localStream();\ndocument.querySelector('audio').srcObject = stream;\n```\n"
							}
						]
					},
					"getSignature": [
						{
							"id": 82,
							"name": "__get",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Gets the local stream of the call.\nThis can be used in a video/audio element to play the local media.\n[MediaStream](https://developer.mozilla.org/en-US/docs/Web/API/MediaStream).",
								"tags": [
									{
										"tag": "examples",
										"text": "\n\n```js\nconst stream = call.localStream();\ndocument.querySelector('audio').srcObject = stream;\n```\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "MediaStream"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseCall.localStream"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "BaseCall.localStream"
					}
				},
				{
					"id": 83,
					"name": "remoteStream",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Gets the remote stream of the call.\nThis can be used in a video/audio element to play the local media.\n[MediaStream](https://developer.mozilla.org/en-US/docs/Web/API/MediaStream).",
						"tags": [
							{
								"tag": "examples",
								"text": "\n\n```js\nconst stream = call.remoteStream();\ndocument.querySelector('audio').srcObject = stream;\n```\n"
							}
						]
					},
					"getSignature": [
						{
							"id": 84,
							"name": "__get",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Gets the remote stream of the call.\nThis can be used in a video/audio element to play the local media.\n[MediaStream](https://developer.mozilla.org/en-US/docs/Web/API/MediaStream).",
								"tags": [
									{
										"tag": "examples",
										"text": "\n\n```js\nconst stream = call.remoteStream();\ndocument.querySelector('audio').srcObject = stream;\n```\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "MediaStream"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseCall.remoteStream"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "BaseCall.remoteStream"
					}
				},
				{
					"id": 85,
					"name": "answer",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 86,
							"name": "answer",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Starts the process to answer the incoming call.",
								"tags": [
									{
										"tag": "examples",
										"text": "\n\n```js\ncall.answer()\n```\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseCall.answer"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "BaseCall.answer"
					}
				},
				{
					"id": 119,
					"name": "deaf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 120,
							"name": "deaf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Turns off the remote stream audio.",
								"tags": [
									{
										"tag": "examples",
										"text": "\n\n```js\ncall.deaf()\n```\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseCall.deaf"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "BaseCall.deaf"
					}
				},
				{
					"id": 98,
					"name": "dtmf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 99,
							"name": "dtmf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Sends dual-tone multi-frequency (DTMF) signal",
								"tags": [
									{
										"tag": "examples",
										"text": "\n\n```js\ncall.dtmf('0');\ncall.dtmf('1');\ncall.dtmf('*');\ncall.dtmf('#');\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 100,
									"name": "dtmf",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "Single DTMF key\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseCall.dtmf"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "BaseCall.dtmf"
					}
				},
				{
					"id": 87,
					"name": "hangup",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"comment": {
						"tags": [
							{
								"tag": "internal",
								"text": ""
							}
						]
					},
					"signatures": [
						{
							"id": 88,
							"name": "hangup",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Hangs up the call.",
								"tags": [
									{
										"tag": "examples",
										"text": "\n\n```js\ncall.hangup()\n```\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseCall.hangup"
							}
						},
						{
							"id": 89,
							"name": "hangup",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "internal",
										"text": "\n"
									}
								]
							},
							"parameters": [
								{
									"id": 90,
									"name": "hangupParams",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "_For internal use_ Specify custom hangup cause and call ID"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 91,
									"name": "hangupExecute",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "_For internal use_ Allow or prevent execution of `Bye`\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseCall.hangup"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "BaseCall.hangup"
					}
				},
				{
					"id": 92,
					"name": "hold",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 93,
							"name": "hold",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Holds the call.",
								"returns": "Promise that resolves or rejects based on server response\n",
								"tags": [
									{
										"tag": "examples",
										"text": "\n\nUsing async/await:\n\n```js\nawait call.hold()\nconsole.log(call.state) // => 'held'\n```\n\nUsing ES6 `Promises`:\n\n```js\ncall.hold().then(() => {\n  console.log(call.state) // => 'held'\n});\n```\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseCall.hold"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "BaseCall.hold"
					}
				},
				{
					"id": 101,
					"name": "muteAudio",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 102,
							"name": "muteAudio",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Turns off audio output, i.e. makes it so other\ncall participants cannot hear your audio.",
								"tags": [
									{
										"tag": "examples",
										"text": "\n\n```js\ncall.muteAudio();\n```\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseCall.muteAudio"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "BaseCall.muteAudio"
					}
				},
				{
					"id": 110,
					"name": "muteVideo",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 111,
							"name": "muteVideo",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Turns off the video output, i.e. hides\nvideo from other call participants.",
								"tags": [
									{
										"tag": "examples",
										"text": "\n\n```js\ncall.muteVideo();\n```\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseCall.muteVideo"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "BaseCall.muteVideo"
					}
				},
				{
					"id": 107,
					"name": "setAudioInDevice",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 108,
							"name": "setAudioInDevice",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Changes the audio input device (i.e. microphone) used for the call.",
								"returns": "Promise that resolves if the audio input device has been updated\n",
								"tags": [
									{
										"tag": "examples",
										"text": "\n\nUsing async/await:\n\n```js\nawait call.setAudioInDevice('abc123')\n```\n\nUsing ES6 `Promises`:\n\n```js\ncall.setAudioInDevice('abc123').then(() => {\n  // Do something using new audio input device\n});\n```\n\nUsage with {@link BrowserSession.getAudioInDevices}:\n\n```js\nlet result = await client.getAudioInDevices();\n\nif (result.length) {\n  call.setAudioInDevice(result[1].deviceId);\n}\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 109,
									"name": "deviceId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "The target audio input device ID"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseCall.setAudioInDevice"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "BaseCall.setAudioInDevice"
					}
				},
				{
					"id": 74,
					"name": "setAudioOutDevice",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 75,
							"name": "setAudioOutDevice",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Changes the audio output device (i.e. speaker) used for the call.",
								"returns": "Promise that returns a boolean\n",
								"tags": [
									{
										"tag": "examples",
										"text": "\n\nUsing async/await:\n\n```js\nawait call.setAudioOutDevice('abc123')\n```\n\nUsing ES6 `Promises`:\n\n```js\ncall.setAudioOutDevice('abc123').then(() => {\n  // Do something using new audio output device\n});\n```\n\nUsage with {@link BrowserSession.getAudioOutDevices}:\n\n```js\nlet result = await client.getAudioOutDevices();\n\nif (result.length) {\n  await call.setAudioOutDevice(result[1].deviceId);\n}\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 76,
									"name": "deviceId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "The target audio output device ID"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 116,
					"name": "setVideoDevice",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 117,
							"name": "setVideoDevice",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Changes the video device (i.e. webcam) used for the call.",
								"returns": "Promise that resolves if the video device has been updated\n",
								"tags": [
									{
										"tag": "examples",
										"text": "\n\nUsing async/await:\n\n```js\nawait call.setVideoDevice('abc123')\n```\n\nUsing ES6 `Promises`:\n\n```js\ncall.setVideoDevice('abc123').then(() => {\n  // Do something using new video device\n});\n```\n\nUsage with {@link BrowserSession.getVideoDevices}:\n\n```js\nlet result = await client.getVideoDevices();\n\nif (result.length) {\n  await call.setVideoDevice(result[1].deviceId);\n}\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 118,
									"name": "deviceId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "the target video device ID"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseCall.setVideoDevice"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "BaseCall.setVideoDevice"
					}
				},
				{
					"id": 105,
					"name": "toggleAudioMute",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 106,
							"name": "toggleAudioMute",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Toggles the audio output on/off.",
								"tags": [
									{
										"tag": "examples",
										"text": "\n\n```js\ncall.toggleAudioMute();\n```\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseCall.toggleAudioMute"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "BaseCall.toggleAudioMute"
					}
				},
				{
					"id": 123,
					"name": "toggleDeaf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 124,
							"name": "toggleDeaf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Toggles the remote stream audio.",
								"tags": [
									{
										"tag": "examples",
										"text": "\n\n```js\ncall.toggleDeaf()\n```\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseCall.toggleDeaf"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "BaseCall.toggleDeaf"
					}
				},
				{
					"id": 96,
					"name": "toggleHold",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 97,
							"name": "toggleHold",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Toggles hold state of the call.",
								"returns": "Promise that resolves or rejects based on server response\n",
								"tags": [
									{
										"tag": "examples",
										"text": "\n\nUsing async/await:\n\n```js\nawait call.toggleHold()\nconsole.log(call.state) // => 'held'\n\nawait call.toggleHold()\nconsole.log(call.state) // => 'active'\n```\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseCall.toggleHold"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "BaseCall.toggleHold"
					}
				},
				{
					"id": 114,
					"name": "toggleVideoMute",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 115,
							"name": "toggleVideoMute",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Toggles the video output on/off.",
								"tags": [
									{
										"tag": "examples",
										"text": "\n\n```js\ncall.toggleVideoMute();\n```\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseCall.toggleVideoMute"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "BaseCall.toggleVideoMute"
					}
				},
				{
					"id": 121,
					"name": "undeaf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 122,
							"name": "undeaf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Turns on the remote stream audio.",
								"tags": [
									{
										"tag": "examples",
										"text": "\n\n```js\ncall.undeaf()\n```\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseCall.undeaf"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "BaseCall.undeaf"
					}
				},
				{
					"id": 94,
					"name": "unhold",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 95,
							"name": "unhold",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Removes hold from the call.",
								"returns": "Promise that resolves or rejects based on server response\n",
								"tags": [
									{
										"tag": "examples",
										"text": "\n\nUsing async/await:\n\n```js\nawait call.unhold()\nconsole.log(call.state) // => 'active'\n```\n\nUsing ES6 `Promises`:\n\n```js\ncall.unhold().then(() => {\n  console.log(call.state) // => 'active'\n});\n```\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseCall.unhold"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "BaseCall.unhold"
					}
				},
				{
					"id": 103,
					"name": "unmuteAudio",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 104,
							"name": "unmuteAudio",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Turns on audio output, i.e. makes it so other\ncall participants can hear your audio.",
								"tags": [
									{
										"tag": "examples",
										"text": "\n\n```js\ncall.unmuteAudio();\n```\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseCall.unmuteAudio"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "BaseCall.unmuteAudio"
					}
				},
				{
					"id": 112,
					"name": "unmuteVideo",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 113,
							"name": "unmuteVideo",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Turns on the video output, i.e. makes\nvideo visible to other call participants.",
								"tags": [
									{
										"tag": "examples",
										"text": "\n\n```js\ncall.unmuteVideo();\n```\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseCall.unmuteVideo"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "BaseCall.unmuteVideo"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						80,
						77,
						79,
						78
					]
				},
				{
					"title": "Accessors",
					"kind": 262144,
					"children": [
						81,
						83
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						85,
						119,
						98,
						87,
						92,
						101,
						110,
						107,
						74,
						116,
						105,
						123,
						96,
						114,
						121,
						94,
						103,
						112
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "BaseCall"
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"name": "IWebRTCCall"
				}
			]
		},
		{
			"id": 127,
			"name": "TelnyxRTC",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {},
			"children": [
				{
					"id": 128,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Creates a new `TelnyxRTC` instance with the provided options.",
						"tags": [
							{
								"tag": "examples",
								"text": "\n\nAuthenticating with a JSON Web Token:\n\n```javascript\nconst client = new TelnyxRTC({\n  login_token: login_token,\n});\n```\n\nAuthenticating with username and password credentials:\n\n```js\nconst client = new TelnyxRTC({\n  login: username,\n  password: password,\n});\n```\n\n### Custom ringtone and ringback\n\nCustom ringback and ringtone files can be a wav/mp3 in your local public folder\nor a file hosted on a CDN, ex: https://cdn.company.com/sounds/call.mp3.\n\nTo use the `ringbackFile`, make sure the \"Generate Ringback Tone\" option is **disabled**\nin your [Telnyx Portal connection](https://portaldev.telnyx.com/#/app/connections)\nconfiguration (Inbound tab.)\n\n```js\nconst client = new TelnyxRTC({\n  login_token: login_token,\n  ringtoneFile: './sounds/incoming_call.mp3',\n  ringbackFile: './sounds/ringback_tone.mp3',\n});\n```\n"
							}
						]
					},
					"signatures": [
						{
							"id": 129,
							"name": "new TelnyxRTC",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Creates a new `TelnyxRTC` instance with the provided options.",
								"tags": [
									{
										"tag": "examples",
										"text": "\n\nAuthenticating with a JSON Web Token:\n\n```javascript\nconst client = new TelnyxRTC({\n  login_token: login_token,\n});\n```\n\nAuthenticating with username and password credentials:\n\n```js\nconst client = new TelnyxRTC({\n  login: username,\n  password: password,\n});\n```\n\n### Custom ringtone and ringback\n\nCustom ringback and ringtone files can be a wav/mp3 in your local public folder\nor a file hosted on a CDN, ex: https://cdn.company.com/sounds/call.mp3.\n\nTo use the `ringbackFile`, make sure the \"Generate Ringback Tone\" option is **disabled**\nin your [Telnyx Portal connection](https://portaldev.telnyx.com/#/app/connections)\nconfiguration (Inbound tab.)\n\n```js\nconst client = new TelnyxRTC({\n  login_token: login_token,\n  ringtoneFile: './sounds/incoming_call.mp3',\n  ringbackFile: './sounds/ringback_tone.mp3',\n});\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 130,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An object with options."
									},
									"type": {
										"type": "reference",
										"name": "ITelnyxRTCOptions"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 127,
								"name": "TelnyxRTC"
							}
						}
					]
				},
				{
					"id": 186,
					"name": "connected",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "`true` if the client is connected to the Telnyx RTC server",
						"tags": [
							{
								"tag": "example",
								"text": "\n\n```js\nconst client = new TelnyxRTC(options);\nconsole.log(client.connected); // => false\n```\n"
							}
						]
					},
					"getSignature": [
						{
							"id": 187,
							"name": "__get",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "`true` if the client is connected to the Telnyx RTC server",
								"tags": [
									{
										"tag": "example",
										"text": "\n\n```js\nconst client = new TelnyxRTC(options);\nconsole.log(client.connected); // => false\n```\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 186,
								"name": "BaseSession.connected"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 186,
						"name": "BaseSession.connected"
					}
				},
				{
					"id": 178,
					"name": "localElement",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Sets the local html element that will receive the local stream.\nGets the local html element.",
						"tags": [
							{
								"tag": "example",
								"text": "\n\n```js\nconst client = new TelnyxRTC(options);\nclient.localElement = '#localElementMediaId';\n```\n"
							},
							{
								"tag": "example",
								"text": "\n\n```js\nconst client = new TelnyxRTC(options);\n\nconsole.log(client.localElement);\n// => HTMLMediaElement\n```\n"
							}
						]
					},
					"getSignature": [
						{
							"id": 181,
							"name": "__get",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Gets the local html element.",
								"tags": [
									{
										"tag": "example",
										"text": "\n\n```js\nconst client = new TelnyxRTC(options);\n\nconsole.log(client.localElement);\n// => HTMLMediaElement\n```\n"
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reference",
										"name": "Function"
									},
									{
										"type": "reference",
										"name": "HTMLMediaElement"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 178,
								"name": "BrowserSession.localElement"
							}
						}
					],
					"setSignature": [
						{
							"id": 179,
							"name": "__set",
							"kind": 1048576,
							"kindString": "Set signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Sets the local html element that will receive the local stream.",
								"tags": [
									{
										"tag": "example",
										"text": "\n\n```js\nconst client = new TelnyxRTC(options);\nclient.localElement = '#localElementMediaId';\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 180,
									"name": "tag",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "HTMLMediaElement"
											},
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"name": "Function"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 178,
								"name": "BrowserSession.localElement"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 178,
						"name": "BrowserSession.localElement"
					}
				},
				{
					"id": 155,
					"name": "mediaConstraints",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Audio and video constraints currently used by the client.",
						"tags": [
							{
								"tag": "examples",
								"text": "\n\n```js\nconst client = new TelnyxRTC(options);\n\nconsole.log(client.mediaConstraints);\n// => { audio: true, video: false }\n```\n"
							},
							{
								"tag": "readonly",
								"text": "\n"
							}
						]
					},
					"getSignature": [
						{
							"id": 156,
							"name": "__get",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Audio and video constraints currently used by the client.",
								"tags": [
									{
										"tag": "examples",
										"text": "\n\n```js\nconst client = new TelnyxRTC(options);\n\nconsole.log(client.mediaConstraints);\n// => { audio: true, video: false }\n```\n"
									},
									{
										"tag": "readonly",
										"text": "\n"
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 157,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 158,
											"name": "audio",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "boolean"
													},
													{
														"type": "reference",
														"name": "MediaTrackConstraints"
													}
												]
											}
										},
										{
											"id": 159,
											"name": "video",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "boolean"
													},
													{
														"type": "reference",
														"name": "MediaTrackConstraints"
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												158,
												159
											]
										}
									]
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 155,
								"name": "BrowserSession.mediaConstraints"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 155,
						"name": "BrowserSession.mediaConstraints"
					}
				},
				{
					"id": 182,
					"name": "remoteElement",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Sets the remote html element that will receive the remote stream.\nGets the remote html element.",
						"tags": [
							{
								"tag": "example",
								"text": "\n\n```js\nconst client = new TelnyxRTC(options);\nclient.remoteElement = '#remoteElementMediaId';\n```\n"
							},
							{
								"tag": "example",
								"text": "\n\n```js\nconst client = new TelnyxRTC(options);\n\nconsole.log(client.remoteElement);\n// => HTMLMediaElement\n```\n"
							}
						]
					},
					"getSignature": [
						{
							"id": 185,
							"name": "__get",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Gets the remote html element.",
								"tags": [
									{
										"tag": "example",
										"text": "\n\n```js\nconst client = new TelnyxRTC(options);\n\nconsole.log(client.remoteElement);\n// => HTMLMediaElement\n```\n"
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reference",
										"name": "Function"
									},
									{
										"type": "reference",
										"name": "HTMLMediaElement"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 182,
								"name": "BrowserSession.remoteElement"
							}
						}
					],
					"setSignature": [
						{
							"id": 183,
							"name": "__set",
							"kind": 1048576,
							"kindString": "Set signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Sets the remote html element that will receive the remote stream.",
								"tags": [
									{
										"tag": "example",
										"text": "\n\n```js\nconst client = new TelnyxRTC(options);\nclient.remoteElement = '#remoteElementMediaId';\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 184,
									"name": "tag",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "HTMLMediaElement"
											},
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"name": "Function"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 182,
								"name": "BrowserSession.remoteElement"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 182,
						"name": "BrowserSession.remoteElement"
					}
				},
				{
					"id": 174,
					"name": "speaker",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Sets the default audio output device for subsequent calls.\nDefault audio output device, if set by client.",
						"tags": [
							{
								"tag": "example",
								"text": "\n\n```js\nlet result = await client.getAudioOutDevices();\n\nif (result.length) {\n  client.speaker = result[1].deviceId;\n}\n```\n"
							},
							{
								"tag": "example",
								"text": "\n\n```js\nconst client = new TelnyxRTC(options);\n\nconsole.log(client.speaker);\n// => \"abc123xyz\"\n```\n"
							}
						]
					},
					"getSignature": [
						{
							"id": 177,
							"name": "__get",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Default audio output device, if set by client.",
								"tags": [
									{
										"tag": "example",
										"text": "\n\n```js\nconst client = new TelnyxRTC(options);\n\nconsole.log(client.speaker);\n// => \"abc123xyz\"\n```\n"
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 174,
								"name": "BrowserSession.speaker"
							}
						}
					],
					"setSignature": [
						{
							"id": 175,
							"name": "__set",
							"kind": 1048576,
							"kindString": "Set signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Sets the default audio output device for subsequent calls.",
								"tags": [
									{
										"tag": "example",
										"text": "\n\n```js\nlet result = await client.getAudioOutDevices();\n\nif (result.length) {\n  client.speaker = result[1].deviceId;\n}\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 176,
									"name": "deviceId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 174,
								"name": "BrowserSession.speaker"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 174,
						"name": "BrowserSession.speaker"
					}
				},
				{
					"id": 136,
					"name": "checkPermissions",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 137,
							"name": "checkPermissions",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Checks if the browser has the permission to access mic and/or webcam",
								"tags": [
									{
										"tag": "examples",
										"text": "\n\nChecking for audio and video permissions:\n\n```js\nconst client = new TelnyxRTC(options);\n\nclient.checkPermissions();\n```\n\nChecking only for audio permissions:\n\n```js\nconst client = new TelnyxRTC(options);\n\nclient.checkPermissions(true, false);\n```\n\nChecking only for video permissions:\n\n```js\nconst client = new TelnyxRTC(options);\n\nclient.checkPermissions(false, true);\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 138,
									"name": "audio",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "Whether to check for microphone permissions."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "true"
								},
								{
									"id": 139,
									"name": "video",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "Whether to check for webcam permissions.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "true"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 136,
								"name": "BrowserSession.checkPermissions"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 136,
						"name": "BrowserSession.checkPermissions"
					}
				},
				{
					"id": 134,
					"name": "connect",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 135,
							"name": "connect",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Creates a new connection for exchanging data with the WebRTC server",
								"tags": [
									{
										"tag": "examples",
										"text": "\n\n```js\nconst client = new TelnyxRTC(options);\n\nclient.connect();\n```\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise"
							},
							"overwrites": {
								"type": "reference",
								"name": "BaseSession.connect"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 134,
								"name": "BrowserSession.connect"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "BaseSession.connect"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 134,
						"name": "BrowserSession.connect"
					}
				},
				{
					"id": 163,
					"name": "disableMicrophone",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 164,
							"name": "disableMicrophone",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Disables use of the microphone in subsequent calls.",
								"text": "Note: This setting will be ignored if `audio: true` is\nspecified when creating a new call.\n",
								"tags": [
									{
										"tag": "examples",
										"text": "\n\n```js\nconst client = new TelnyxRTC(options);\n\nclient.disableMicrophone();\n```\n\nKeep in mind that new calls will fail if both the\nmicrophone and webcam is disabled. Make sure that the\nwebcam is manually enabled, or `video: true` is\nspecified before disabling the microphone.\n\n```js\nconst client = new TelnyxRTC({\n  ...options,\n  video: true\n});\n\nclient.disableMicrophone();\n```\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 163,
								"name": "BrowserSession.disableMicrophone"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 163,
						"name": "BrowserSession.disableMicrophone"
					}
				},
				{
					"id": 170,
					"name": "disableWebcam",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 171,
							"name": "disableWebcam",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Disables use of the webcam in subsequent calls.",
								"text": "Note: This method will disable the video even if `video: true` is specified.\n",
								"tags": [
									{
										"tag": "examples",
										"text": "\n\n```js\nconst client = new TelnyxRTC(options);\n\nclient.disableWebcam();\n```\n\n```js\nconst client = new TelnyxRTC({\n  ...options,\n  video: true\n});\n\nclient.disableWebcam();\n```\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 170,
								"name": "BrowserSession.disableWebcam"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 170,
						"name": "BrowserSession.disableWebcam"
					}
				},
				{
					"id": 142,
					"name": "disconnect",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 143,
							"name": "disconnect",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Disconnect all active calls",
								"tags": [
									{
										"tag": "examples",
										"text": "\n\n```js\nconst client = new TelnyxRTC(options);\n\nclient.disconnect();\n```\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise"
							},
							"overwrites": {
								"type": "reference",
								"name": "BaseSession.disconnect"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 142,
								"name": "BrowserSession.disconnect"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "BaseSession.disconnect"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 142,
						"name": "BrowserSession.disconnect"
					}
				},
				{
					"id": 165,
					"name": "enableMicrophone",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 166,
							"name": "enableMicrophone",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Enables use of the microphone in subsequent calls.",
								"text": "Note: This setting will be ignored if `audio: false` is\nspecified when creating a new call.\n",
								"tags": [
									{
										"tag": "examples",
										"text": "\n\n```js\nconst client = new TelnyxRTC(options);\n\nclient.enableMicrophone();\n```\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 165,
								"name": "BrowserSession.enableMicrophone"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 165,
						"name": "BrowserSession.enableMicrophone"
					}
				},
				{
					"id": 172,
					"name": "enableWebcam",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 173,
							"name": "enableWebcam",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Enables use of the webcam in subsequent calls.",
								"text": "Note: This setting will be ignored if `video: false` is\nspecified when creating a new call.\n",
								"tags": [
									{
										"tag": "examples",
										"text": "\n\n```js\nconst client = new TelnyxRTC(options);\n\nclient.enableWebcam();\n```\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 172,
								"name": "BrowserSession.enableWebcam"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 172,
						"name": "BrowserSession.enableWebcam"
					}
				},
				{
					"id": 148,
					"name": "getAudioInDevices",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 149,
							"name": "getAudioInDevices",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Return the audio output devices supported by the browser.",
								"returns": "Promise with an array of MediaDeviceInfo\n",
								"tags": [
									{
										"tag": "examples",
										"text": "\n\nUsing async/await:\n\n```js\nasync function() {\n  const client = new TelnyxRTC(options);\n\n  let result = await client.getAudioInDevices();\n\n  console.log(result);\n}\n```\n\nUsing ES6 `Promises`:\n\n```js\nclient.getAudioInDevices().then((result) => {\n  console.log(result);\n});\n```\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "MediaDeviceInfo"
										}
									}
								],
								"name": "Promise"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 148,
								"name": "BrowserSession.getAudioInDevices"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 148,
						"name": "BrowserSession.getAudioInDevices"
					}
				},
				{
					"id": 150,
					"name": "getAudioOutDevices",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 151,
							"name": "getAudioOutDevices",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns the audio output devices supported by the browser.",
								"text": "Browser Compatibility Note: Firefox has yet to fully implement\naudio output devices. As of v63, this feature is behind the\nuser preference `media.setsinkid.enabled`.\nSee: https://bugzilla.mozilla.org/show_bug.cgi?id=1152401#c98\n",
								"returns": "Promise with an array of MediaDeviceInfo\n",
								"tags": [
									{
										"tag": "examples",
										"text": "\n\nUsing async/await:\n\n```js\nasync function() {\n  const client = new TelnyxRTC(options);\n\n  let result = await client.getAudioOutDevices();\n\n  console.log(result);\n}\n```\n\nUsing ES6 `Promises`:\n\n```js\nclient.getAudioOutDevices().then((result) => {\n  console.log(result);\n});\n```\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "MediaDeviceInfo"
										}
									}
								],
								"name": "Promise"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 150,
								"name": "BrowserSession.getAudioOutDevices"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 150,
						"name": "BrowserSession.getAudioOutDevices"
					}
				},
				{
					"id": 152,
					"name": "getDeviceResolutions",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 153,
							"name": "getDeviceResolutions",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns supported resolution for the given webcam.",
								"tags": [
									{
										"tag": "examples",
										"text": "\n\nIf `deviceId` is `null`\n\n1. if `deviceId` is `null` and you don't have a webcam connected to your computer,\nit will throw an error with the message `\"Requested device not found\"`.\n\n2. if `deviceId` is `null` and you have one or more webcam connected to your computer,\nit will return a list of resolutions from the default device set up in your operating system.\n\nUsing async/await:\n\n```js\nasync function() {\n  const client = new TelnyxRTC(options);\n  let result = await client.getDeviceResolutions();\n  console.log(result);\n}\n```\n\nUsing ES6 `Promises`:\n\n```js\nclient.getDeviceResolutions().then((result) => {\n  console.log(result);\n});\n```\n\nIf `deviceId` is **not** `null`\n\nit will return a list of resolutions from the `deviceId` sent.\n\nUsing async/await:\n\n```js\nasync function() {\n  const client = new TelnyxRTC(options);\n  let result = await client.getDeviceResolutions(deviceId);\n  console.log(result);\n}\n```\n\nUsing ES6 `Promises`:\n\n```js\nclient.getDeviceResolutions(deviceId).then((result) => {\n  console.log(result);\n});\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 154,
									"name": "deviceId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "the `deviceId` from your webcam.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								],
								"name": "Promise"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 152,
								"name": "BrowserSession.getDeviceResolutions"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 152,
						"name": "BrowserSession.getDeviceResolutions"
					}
				},
				{
					"id": 144,
					"name": "getDevices",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 145,
							"name": "getDevices",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns a list of devices supported by the browser",
								"tags": [
									{
										"tag": "examples",
										"text": "\n\nUsing async/await:\n\n```js\nasync function() {\n  const client = new TelnyxRTC(options);\n  let result = await client.getDevices();\n  console.log(result);\n}\n```\n\nUsing ES6 `Promises`:\n\n```js\nclient.getDevices().then((result) => {\n  console.log(result);\n});\n```\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "MediaDeviceInfo"
										}
									}
								],
								"name": "Promise"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 144,
								"name": "BrowserSession.getDevices"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 144,
						"name": "BrowserSession.getDevices"
					}
				},
				{
					"id": 146,
					"name": "getVideoDevices",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 147,
							"name": "getVideoDevices",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns a list of video devices supported by the browser (i.e. webcam).",
								"returns": "Promise with an array of MediaDeviceInfo\n",
								"tags": [
									{
										"tag": "examples",
										"text": "\n\nUsing async/await:\n\n```js\nasync function() {\n  const client = new TelnyxRTC(options);\n  let result = await client.getVideoDevices();\n  console.log(result);\n}\n```\n\nUsing ES6 `Promises`:\n\n```js\nclient.getVideoDevices().then((result) => {\n  console.log(result);\n});\n```\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "MediaDeviceInfo"
										}
									}
								],
								"name": "Promise"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 146,
								"name": "BrowserSession.getVideoDevices"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 146,
						"name": "BrowserSession.getVideoDevices"
					}
				},
				{
					"id": 140,
					"name": "logout",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 141,
							"name": "logout",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Alias for .disconnect()",
								"tags": [
									{
										"tag": "deprecated",
										"text": "\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 140,
								"name": "BrowserSession.logout"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 140,
						"name": "BrowserSession.logout"
					}
				},
				{
					"id": 131,
					"name": "newCall",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 132,
							"name": "newCall",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Makes a new outbound call.",
								"text": "This method receives an object `options` with the following properties:\n",
								"returns": "The new outbound `Call` object.\n",
								"tags": [
									{
										"tag": "examples",
										"text": "\n\nMaking an outbound call to `+1 856-444-0362` using default values from the client:\n\n```js\nconst call = client.newCall({\n  destinationNumber: '+18564440362',\n  callerNumber: '+15551231234'\n});\n```\n\nYou can omit `callerNumber` when dialing a SIP address:\n\n```js\nconst call = client.newCall({\n destinationNumber: 'sip:example-sip-username@voip-provider.example.net'\n});\n```\n\nIf you are making calls from one Telnyx connection to another, you may specify just the SIP username:\n\n```js\nconst call = client.newCall({\n destinationNumber: 'telnyx-sip-username' // This is equivalent to 'sip:telnyx-sip-username@sip.telnyx.com'\n});\n```\n\n### Error handling\n\nAn error will be thrown if `destinationNumber` is not specified.\n\n```js\nconst call = client.newCall().catch(console.error);\n// => `destinationNumber is required`\n"
									}
								]
							},
							"parameters": [
								{
									"id": 133,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "Options object for a new call."
									},
									"type": {
										"type": "reference",
										"name": "CallOptions"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 73,
								"name": "Call"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 131,
								"name": "Verto.newCall"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 131,
						"name": "Verto.newCall"
					}
				},
				{
					"id": 217,
					"name": "off",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 218,
							"name": "off",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Removes an event handler that were attached with .on().\nIf no handler parameter is passed, all listeners for that event will be removed.",
								"returns": "The client object itself.\n\nNote: a handler will be removed from the stack by reference\nso make sure to use the same reference in both `.on()` and `.off()` methods.\n",
								"tags": [
									{
										"tag": "examples",
										"text": "\n\nSubscribe to the `telnyx.error` and then, remove the event handler.\n\n```js\nconst errorHandler = (error) => {\n // Log the error..\n}\n\nconst client = new TelnyxRTC(options);\n\nclient.on('telnyx.error', errorHandler)\n\n // .. later\nclient.off('telnyx.error', errorHandler)\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 219,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "Event name."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 220,
									"name": "callback",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"text": "Function handler to be removed.\n"
									},
									"type": {
										"type": "reference",
										"name": "Function"
									}
								}
							],
							"type": {
								"type": "unknown",
								"name": "this"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 217,
								"name": "BaseSession.off"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 217,
						"name": "BaseSession.off"
					}
				},
				{
					"id": 213,
					"name": "on",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 214,
							"name": "on",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Attaches an event handler for a specific type of event.",
								"text": "## Events\n|   |   |\n|---|---|\n| `telnyx.ready` | The client is authenticated and available to use |\n| `telnyx.error` | An error occurred at the session level |\n| `telnyx.notification` | An update to the call or session |\n| `telnyx.socket.open` | The WebSocket connection has been made |\n| `telnyx.socket.close` | The WebSocket connection is set to close |\n| `telnyx.socket.error` | An error occurred at the WebSocket level |\n| `telnyx.socket.message` | The client has received a message through WebSockets |\n",
								"returns": "The client object itself.\n",
								"tags": [
									{
										"tag": "examples",
										"text": "\n\nSubscribe to the `telnyx.ready` and `telnyx.error` events.\n\n```js\nconst client = new TelnyxRTC(options);\n\nclient.on('telnyx.ready', (client) => {\n  // Your client is ready!\n}).on('telnyx.error', (error) => {\n  // Got an error...\n})\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 215,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "Event name."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 216,
									"name": "callback",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "Function to call when the event comes."
									},
									"type": {
										"type": "reference",
										"name": "Function"
									}
								}
							],
							"type": {
								"type": "unknown",
								"name": "this"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 213,
								"name": "BaseSession.on"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 213,
						"name": "BaseSession.on"
					}
				},
				{
					"id": 160,
					"name": "setAudioSettings",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 161,
							"name": "setAudioSettings",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Sets the default `audio` constraints for your client. [See here](https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints#Properties_of_audio_tracks) for further details.",
								"text": "Note: It's a common behaviour, in WebRTC applications,\nto persist devices user's selection to then reuse them across visits.\nDue to a Webkit’s security protocols, Safari generates random `deviceId` on each page load.\nTo avoid this issue you can specify two additional properties\n`micId` and `micLabel` in the constraints input parameter.\nThe client will use these values to assure the microphone you want to use is available\nby matching both id and label with the device list retrieved from the browser.\n",
								"returns": "`Promise<MediaTrackConstraints>` Audio constraints applied to the client.\n",
								"tags": [
									{
										"tag": "examples",
										"text": "\n\nSet microphone by `id` and `label` with the `echoCancellation` flag turned off:\n\n```js\n// within an async function\nconst constraints = await client.setAudioSettings({\n micId: '772e94959e12e589b1cc71133d32edf543d3315cfd1d0a4076a60601d4ff4df8',\n micLabel: 'Internal Microphone (Built-in)',\n echoCancellation: false\n})\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 162,
									"name": "settings",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "(https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints) object with the addition of `micId` and `micLabel`.\n"
									},
									"type": {
										"type": "reference",
										"name": "IAudioSettings"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "MediaTrackConstraints"
									}
								],
								"name": "Promise"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 160,
								"name": "BrowserSession.setAudioSettings"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 160,
						"name": "BrowserSession.setAudioSettings"
					}
				},
				{
					"id": 167,
					"name": "setVideoSettings",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 168,
							"name": "setVideoSettings",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Sets the default `video` constraints for your client. [See here](https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints#Properties_of_video_tracks) for further details.",
								"text": "Note: It's a common behaviour, in WebRTC applications,\nto persist devices user's selection to then reuse them across visits.\nDue to a Webkit’s security protocols, Safari generates random `deviceId` on each page load.\nTo avoid this issue you can specify two additional properties\n`camId` and `camLabel` in the constraints input parameter.\nThe client will use these values to assure the webcam you want to use is available\nby matching both `id` and `label` with the device list retrieved from the browser.\n",
								"returns": "`Promise<MediaTrackConstraints>` Video constraints applied to the client.\n",
								"tags": [
									{
										"tag": "examples",
										"text": "\n\nSet webcam by `id` and `label` with 720p resolution.\n\n```js\n// within an async function\nconst constraints = await client.setVideoSettings({\n camId: '882e94959e12e589b1cc71133d32edf543d3315cfd1d0a4076a60601d4ff4df8',\n camLabel: 'Default WebCam (Built-in)',\n width: 1080,\n height: 720\n})\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 169,
									"name": "settings",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "(https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints) object with the addition of `camId` and `camLabel`.\n"
									},
									"type": {
										"type": "reference",
										"name": "IVideoSettings"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "MediaTrackConstraints"
									}
								],
								"name": "Promise"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 167,
								"name": "BrowserSession.setVideoSettings"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 167,
						"name": "BrowserSession.setVideoSettings"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						128
					]
				},
				{
					"title": "Accessors",
					"kind": 262144,
					"children": [
						186,
						178,
						155,
						182,
						174
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						136,
						134,
						163,
						170,
						142,
						165,
						172,
						148,
						150,
						152,
						144,
						146,
						140,
						131,
						217,
						213,
						160,
						167
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "Verto"
				}
			]
		}
	],
	"groups": [
		{
			"title": "Classes",
			"kind": 128,
			"children": [
				73,
				127
			]
		}
	]
}
export interface IClient {
  calls: Record<string, ICall>;

  connected: boolean;
  localElement: HTMLMediaElement | null;
  mediaConstraints: MediaStreamConstraints;
  remoteElement: HTMLMediaElement | null;
  speaker: string | null;
  checkPermissions(audio: boolean, video: boolean): Promise<boolean>;
  connect(): Promise<unknown>;
  disableMicrophone(): void;
  disableWebcam(): void;
  disconnect(): Promise<unknown>;
  enableMicrophone(): void;
  enableWebcam(): void;
  getAudioInDevices(): Promise<MediaDeviceInfo[]>;
  getAudioOutDevices(): Promise<MediaDeviceInfo[]>;
  getDeviceResolutions(
    deviceId: string
  ): { resolution: string; width: number; height: number }[];
  getDevices(): Promise<MediaDeviceInfo[]>;
  getVideoDevices(): Promise<MediaDeviceInfo[]>;
  logout(): Promise<void>;
  // newCall(options: ICallOptions): Promise<ICall>;
  off(eventName: string, callback: Function): void;
  on(eventName: string, callback: Function): void;

  webRTCInfo(): IWebRTCInfo;
  webRTCSupportedBrowserList(): IWebRTCSupportedBrowser[];
}

export type AnyFunction = (...args: any[]) => any;

export interface IClientOptions {
  login_token?: string;
  login?: string;
  password?: string;
  ringtoneFile?: string;
  ringbackFile?: string;
}

export type CallState =
  | "new"
  | "trying"
  | "requesting"
  | "recovering"
  | "ringing"
  | "answering"
  | "early"
  | "active"
  | "held"
  | "hangup"
  | "purge"
  | "destroy";

export interface ICall {
  direction: "inbound" | "outbound";
  id: string;
  prevState: CallState;
  state: CallState;
  localStream: MediaStream | null;
  remoteStream: MediaStream | null;
  destinationNumber: string;
  telnyxIDs: {};
  hangup(): Promise<void>;
  answer(): Promise<void>;
  deaf(): void;
  dtmf(dtmf: string): Promise<void>;
  // getStats(callback, constraints)â€‹
  hold(): Promise<void>;
  muteAudio(): Promise<void>;
  muteVideo(): Promise<void>;
  setAudioInDevice(deviceId: string): Promise<void>;
  setAudioOutDevice(deviceId: string): Promise<void>;
  setVideoDevice(deviceId: string): Promise<void>;
  toggleAudioMute(): void;
  toggleDeaf(): void;
  toggleHold(): Promise<void>;
  toggleVideoMute(): void;
  undeaf(): void;
  unhold(): Promise<void>;
  unmuteAudio(): void;
  unmuteVideo(): void;
}

export interface IWebRTCSupportedBrowser {
  operationSystem: string;
  supported: Array<string>;
}
export interface IWebRTCInfo {
  browserInfo: any;
  browserName: string;
  browserVersion: number;
  supportWebRTC: boolean;
  supportWebRTCAudio: boolean;
  supportWebRTCVideo: boolean;
  supportRTCPeerConnection: boolean;
  supportSessionDescription: boolean;
  supportIceCandidate: boolean;
  supportMediaDevices: boolean;
  supportGetUserMedia: boolean;
}

export interface ICallOptions {
  /**
   * Phone number or SIP URI to dial.
   */
  destinationNumber: string;
  /**
   * Number to use as the caller ID when dialing out to a destination. A valid phone number is required for dials out to PSTN numbers.
   */
  callerNumber?: string;
  /**
   * Name to use as the caller ID name when dialing out to a destination.
   */
  callerName?: string;
  /**
   * Custom ID to identify the call. This will be used as the `callID` in place of the UUID generated by the client.
   */
  id?: string;
  /**
   * Telnyx Call Control ID, if using Call Control services.
   */
  telnyxCallControlId?: string;
  /**
   * Telnyx call session ID, if using Call Control services.
   */
  telnyxSessionId?: string;
  /**
   * Telnyx call leg ID, if using Call Control services.
   */
  telnyxLegId?: string;
  /**
   *
   * Telnyx's Call Control client_state. Can be used with Connections with Advanced -> Events enabled.
   * `clientState` string should be base64 encoded.
   */
  clientState?: string;
  /**
   * If set, the call will use this stream instead of retrieving a new one.
   */
  localStream?: MediaStream;
  /**
   * If set, the call will use this stream instead of retrieving a new one.
   */
  remoteStream?: MediaStream;
  /**
   * Overrides client's default `localElement`.
   */
  localElement?: HTMLMediaElement | string;
  /**
   * Overrides client's default `remoteElement`.
   */
  remoteElement?: HTMLMediaElement | string;
  /**
   * Overrides client's default `iceServers`.
   */
  iceServers?: RTCIceServer[];
  /**
   * Overrides client's default audio constraints. Defaults to `true`
   */
  audio?: boolean;
  /**
   * Overrides client's default video constraints. Defaults to `false`
   */
  video?: boolean;
  /**
   * Uses stereo audio instead of mono.
   */
  useStereo?: boolean;
  /**
   * `deviceId` to use as microphone. Overrides the client's default one.
   */
  micId?: string;
  /**
   * `deviceId` to use as webcam. Overrides the client's default one.
   */
  camId?: string;
  /**
   * `deviceId` to use as speaker. Overrides the client's default one.
   */
  speakerId?: string;
  /**
   * Overrides client's default `telnyx.notification` handler for this call.
   */
  onNotification?: Function;

  /**
   * Configures media (audio/video) in a call.
   */
  mediaSettings?: {
    useSdpASBandwidthKbps?: boolean;
    sdpASBandwidthKbps?: number;
  };

  /**
   * Add custom headers to the INVITE and ANSWER request.
   */
  customHeaders?: { name: string; value: string }[];
}

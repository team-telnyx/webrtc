/**
 * IClientOptions
 * @interface IClientOptions
 */
export interface IClientOptions {
  /**
   * The JSON Web Token (JWT) to authenticate with your SIP Connection.
   * This is the recommended authentication strategy. [See how to create one](https://developers.telnyx.com/docs/v2/webrtc/quickstart).
   */
  login_token?: string;
  /**
   * The `username` to authenticate with your SIP Connection.
   * `login` and `password` will take precedence over
   * `login_token` for authentication.
   */
  login?: string;
  /**
   * The `password` to authenticate with your SIP Connection.
   */
  password?: string;
  /**
   * A URL to a wav/mp3 ringtone file.
   */
  ringtoneFile?: string;
  /**
   * A URL to a wav/mp3 ringback file that will be used when you disable
   * "Generate Ringback Tone" in your SIP Connection.
   */
  ringbackFile?: string;
}

export interface AnswerParams {
  customHeaders?: Array<{ name: string; value: string }>;
}

export interface ICallOptions {
  /**
   * Phone number or SIP URI to dial.
   */
  destinationNumber: string;
  /**
   * Number to use as the caller ID when dialing out to a destination. A valid phone number is required for dials out to PSTN numbers.
   */
  callerNumber?: string;
  /**
   * Name to use as the caller ID name when dialing out to a destination.
   */
  callerName?: string;
  /**
   * Custom ID to identify the call. This will be used as the `callID` in place of the UUID generated by the client.
   */
  id?: string;
  /**
   * Telnyx Call Control ID, if using Call Control services.
   */
  telnyxCallControlId?: string;
  /**
   * Telnyx call session ID, if using Call Control services.
   */
  telnyxSessionId?: string;
  /**
   * Telnyx call leg ID, if using Call Control services.
   */
  telnyxLegId?: string;
  /**
   *
   * Telnyx's Call Control client_state. Can be used with Connections with Advanced -> Events enabled.
   * `clientState` string should be base64 encoded.
   */
  clientState?: string;
  /**
   * If set, the call will use this stream instead of retrieving a new one.
   */
  localStream?: MediaStream;
  /**
   * If set, the call will use this stream instead of retrieving a new one.
   */
  remoteStream?: MediaStream;
  /**
   * Overrides client's default `localElement`.
   */
  localElement?: HTMLMediaElement | string;
  /**
   * Overrides client's default `remoteElement`.
   */
  remoteElement?: HTMLMediaElement | string;
  /**
   * Overrides client's default `iceServers`.
   */
  iceServers?: RTCIceServer[];
  /**
   * Overrides client's default audio constraints. Defaults to `true`
   */
  audio?: boolean;
  /**
   * Overrides client's default video constraints. Defaults to `false`
   */
  video?: boolean;
  /**
   * Uses stereo audio instead of mono.
   */
  useStereo?: boolean;
  /**
   * `deviceId` to use as microphone. Overrides the client's default one.
   */
  micId?: string;
  /**
   * `deviceId` to use as webcam. Overrides the client's default one.
   */
  camId?: string;
  /**
   * `deviceId` to use as speaker. Overrides the client's default one.
   */
  speakerId?: string;
  /**
   * Overrides client's default `telnyx.notification` handler for this call.
   */
  onNotification?: Function;

  /**
   * Configures media (audio/video) in a call.
   */
  mediaSettings?: {
    useSdpASBandwidthKbps?: boolean;
    sdpASBandwidthKbps?: number;
  };

  /**
   * Add custom headers to the INVITE and ANSWER request.
   */
  customHeaders?: { name: string; value: string }[];

  /**
   * Janus Session Id
   */
  sessionId: number;

  /**
   * Janus handle Id
   */
  handleId: number;

  /**
   * SDP offer
   */
  remoteSdp?: RTCSessionDescriptionInit;
}

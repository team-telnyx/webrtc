import BrowserSession from './BrowserSession';
import { SubscribeParams, BroadcastParams } from './util/interfaces';
import { CallOptions } from './webrtc/interfaces';
import { Login } from './messages/Verto';
import Call from './webrtc/Call';
import { SwEvent, SESSION_ID } from './util/constants';
import { trigger } from './services/Handler';
import { sessionStorage } from './util/storage';
import VertoHandler from './webrtc/VertoHandler';
import { isValidOptions } from './util/helpers';
import logger from './util/logger';

export const VERTO_PROTOCOL = 'verto-protocol';

export default class Verto extends BrowserSession {
  public relayProtocol: string = VERTO_PROTOCOL;

  public timeoutErrorCode = -329990; // fake verto timeout error code.

  validateOptions() {
    return isValidOptions(this.options);
  }

  /**
   * Makes a new outbound call.
   *
   * This method receives an object `options` with the following properties:
   * |   |   |   |   |
   * |---|---|---|---|
   * | `destinationNumber` | string | **required** | Phone number or SIP URI to dial. |
   * | `callerNumber` | string | optional | Number to use as the caller ID when dialing out to a destination. A valid phone number is required for dials out to PSTN numbers. |
   * | `callerName` | string | optional | Name to use as the caller ID name when dialing out to a destination. |
   * | `id` | string | optional | Custom ID to identify the call. This will be used as the `callID` in place of the UUID generated by the client. |
   * | `telnyxCallControlId` | string | optional | Telnyx Call Control ID, if using Call Control services |
   * | `telnyxSessionId` | string | optional | Telnyx call session ID, if using Call Control services |
   * | `telnyxLegId` | string | optional | Telnyx call leg ID, if using Call Control services |
   * | `localStream` | MediaStream | optional | If set, the call will use this stream instead of retrieving a new one. |
   * | `remoteStream` | MediaStream | optional | If set, the call will use this stream instead of retrieving a new one. |
   * | `localElement` | HTMLMediaElement | optional | Overrides client's default `localElement`. |
   * | `remoteElement` | HTMLMediaElement | optional | Overrides client's default `remoteElement`. |
   * | `iceServers` | RTCIceServer[] | optional | Overrides client's default `iceServers`. |
   * | `audio` | boolean | optional | Overrides client's default audio constraints. Defaults to `true` |
   * | `video` | boolean | optional | Overrides client's default video constraints. Defaults to `false` |
   * | `useStereo` | boolean | optional | Uses stereo audio instead of mono. |
   * | `micId` | string | optional | `deviceId` to use as microphone. Overrides the client's default one. |
   * | `camId` | string | optional | `deviceId` to use as webcam. Overrides the client's default one. |
   * | `speakerId` | string | optional | `deviceId` to use as speaker. Overrides the client's default one. |
   * | `onNotification` | Function | optional | Overrides client's default `telnyx.notification` handler for this call. |
   *
   * @param options Options object for a new call.
   *
   * @return The new outbound `Call` object.
   *
   * @examples
   *
   * Making an outbound call to `+1 856-444-0362` using default values from the client:
   *
   * ```js
   * const call = client.newCall({
   *   destinationNumber: '+18564440362',
   *   callerNumber: '+15551231234'
   * });
   * ```
   *
   * You can omit `callerNumber` when dialing a SIP address:
   *
   * ```js
   * const call = client.newCall({
   *  destinationNumber: 'sip:example-sip-username@voip-provider.example.net'
   * });
   * ```
   *
   * If you are making calls from one Telnyx connection to another, you may specify just the SIP username:
   *
   * ```js
   * const call = client.newCall({
   *  destinationNumber: 'telnyx-sip-username' // This is equivalent to 'sip:telnyx-sip-username@sip.telnyx.com'
   * });
   * ```
   *
   * ### Error handling
   *
   * An error will be thrown if `destinationNumber` is not specified.
   *
   * ```js
   * const call = client.newCall().catch(console.error);
   * // => `destinationNumber is required`
   * ```
   */
  newCall(options: CallOptions) {
    if (!options || !options.destinationNumber) {
      throw new Error('Verto.newCall() error: destinationNumber is required.');
    }

    const call = new Call(this, options);
    call.invite();
    return call;
  }

  broadcast(params: BroadcastParams) {
    return this.vertoBroadcast(params);
  }

  subscribe(params: SubscribeParams) {
    return this.vertoSubscribe(params);
  }

  unsubscribe(params: SubscribeParams) {
    return this.vertoUnsubscribe(params);
  }

  protected async _onSocketOpen() {
    this._idle = false;
    const {
      login,
      password,
      passwd,
      login_token,
      userVariables,
    } = this.options;
    const msg = new Login(
      login,
      password || passwd,
      login_token,
      this.sessionid,
      userVariables
    );
    const response = await this.execute(msg).catch(this._handleLoginError);
    if (response) {
      this._autoReconnect = true;
      this.sessionid = response.sessid;
      sessionStorage.setItem(SESSION_ID, this.sessionid);
      trigger(SwEvent.Ready, this, this.uuid);
      logger.info('Session Ready!');
    }
  }

  protected _onSocketMessage(msg: any) {
    const handler = new VertoHandler(this);
    handler.handleMessage(msg);
  }
}
